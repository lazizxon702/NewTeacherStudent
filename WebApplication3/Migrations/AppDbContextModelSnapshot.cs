// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApplication3.Data;

#nullable disable

namespace WebApplication3.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StudentTeacher.Student.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<int>("GradeLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("grade_level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("FullName");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Talabala", (string)null);
                });

            modelBuilder.Entity("WebApplication3.model.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city_name");

                    b.HasKey("Id");

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Toshkent"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Samarqand"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Buxoro"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Andijon"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Xorazm"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Namangan"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Farg‘ona"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Qashqadaryo"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Surxondaryo"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Jizzax"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Sirdaryo"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Navoiy"
                        });
                });

            modelBuilder.Entity("WebApplication3.model.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("department_name");

                    b.HasKey("Id");

                    b.ToTable("Departments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 8, 25, 12, 21, 1, 211, DateTimeKind.Utc).AddTicks(8157),
                            LastUpdated = new DateTime(2025, 8, 25, 12, 21, 1, 211, DateTimeKind.Utc).AddTicks(8153),
                            Name = "Information"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 8, 25, 12, 21, 1, 211, DateTimeKind.Utc).AddTicks(8925),
                            LastUpdated = new DateTime(2025, 8, 25, 12, 21, 1, 211, DateTimeKind.Utc).AddTicks(8924),
                            Name = "Fizika"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 8, 25, 12, 21, 1, 211, DateTimeKind.Utc).AddTicks(8927),
                            LastUpdated = new DateTime(2025, 8, 25, 12, 21, 1, 211, DateTimeKind.Utc).AddTicks(8927),
                            Name = "Biology"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 8, 25, 12, 21, 1, 211, DateTimeKind.Utc).AddTicks(8929),
                            LastUpdated = new DateTime(2025, 8, 25, 12, 21, 1, 211, DateTimeKind.Utc).AddTicks(8929),
                            Name = "Geography"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 8, 25, 12, 21, 1, 211, DateTimeKind.Utc).AddTicks(8932),
                            LastUpdated = new DateTime(2025, 8, 25, 12, 21, 1, 211, DateTimeKind.Utc).AddTicks(8931),
                            Name = "Kimio"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2025, 8, 25, 12, 21, 1, 211, DateTimeKind.Utc).AddTicks(8934),
                            LastUpdated = new DateTime(2025, 8, 25, 12, 21, 1, 211, DateTimeKind.Utc).AddTicks(8933),
                            Name = "English"
                        });
                });

            modelBuilder.Entity("WebApplication3.model.StudentsSubjects", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Mark")
                        .HasColumnType("integer");

                    b.HasKey("StudentId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("StudentsSubjects");
                });

            modelBuilder.Entity("WebApplication3.model.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GradeLevel")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("subject_name");

                    b.HasKey("Id");

                    b.ToTable("Subjects", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 8, 25, 12, 21, 1, 212, DateTimeKind.Utc).AddTicks(382),
                            GradeLevel = 0,
                            IsDeleted = false,
                            LastUpdated = new DateTime(2025, 8, 25, 12, 21, 1, 212, DateTimeKind.Utc).AddTicks(379),
                            Name = "mathematica"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 8, 25, 12, 21, 1, 212, DateTimeKind.Utc).AddTicks(1157),
                            GradeLevel = 0,
                            IsDeleted = false,
                            LastUpdated = new DateTime(2025, 8, 25, 12, 21, 1, 212, DateTimeKind.Utc).AddTicks(1156),
                            Name = "Fizika"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 8, 25, 12, 21, 1, 212, DateTimeKind.Utc).AddTicks(1196),
                            GradeLevel = 0,
                            IsDeleted = false,
                            LastUpdated = new DateTime(2025, 8, 25, 12, 21, 1, 212, DateTimeKind.Utc).AddTicks(1195),
                            Name = "Biology"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 8, 25, 12, 21, 1, 212, DateTimeKind.Utc).AddTicks(1199),
                            GradeLevel = 0,
                            IsDeleted = false,
                            LastUpdated = new DateTime(2025, 8, 25, 12, 21, 1, 212, DateTimeKind.Utc).AddTicks(1198),
                            Name = "Geography"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 8, 25, 12, 21, 1, 212, DateTimeKind.Utc).AddTicks(1201),
                            GradeLevel = 0,
                            IsDeleted = false,
                            LastUpdated = new DateTime(2025, 8, 25, 12, 21, 1, 212, DateTimeKind.Utc).AddTicks(1200),
                            Name = "Kimio"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2025, 8, 25, 12, 21, 1, 212, DateTimeKind.Utc).AddTicks(1203),
                            GradeLevel = 0,
                            IsDeleted = false,
                            LastUpdated = new DateTime(2025, 8, 25, 12, 21, 1, 212, DateTimeKind.Utc).AddTicks(1203),
                            Name = "English"
                        });
                });

            modelBuilder.Entity("WebApplication3.model.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("SubjectId");

                    b.ToTable("O'qituvchi", (string)null);
                });

            modelBuilder.Entity("WebApplication3.model.TeacherSubject", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TeacherId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("TeacherSubjects");
                });

            modelBuilder.Entity("StudentTeacher.Student.Student", b =>
                {
                    b.HasOne("WebApplication3.model.City", "City")
                        .WithMany("Students")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApplication3.model.Departments", "Departments")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("WebApplication3.model.StudentsSubjects", b =>
                {
                    b.HasOne("StudentTeacher.Student.Student", "Student")
                        .WithMany("StudentsSubjects")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication3.model.Subject", "Subject")
                        .WithMany("StudentsSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("WebApplication3.model.Teacher", b =>
                {
                    b.HasOne("WebApplication3.model.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication3.model.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("WebApplication3.model.TeacherSubject", b =>
                {
                    b.HasOne("WebApplication3.model.Subject", "Subject")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication3.model.Teacher", "Teacher")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentTeacher.Student.Student", b =>
                {
                    b.Navigation("StudentsSubjects");
                });

            modelBuilder.Entity("WebApplication3.model.City", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("WebApplication3.model.Departments", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("WebApplication3.model.Subject", b =>
                {
                    b.Navigation("StudentsSubjects");

                    b.Navigation("TeacherSubjects");
                });

            modelBuilder.Entity("WebApplication3.model.Teacher", b =>
                {
                    b.Navigation("TeacherSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
